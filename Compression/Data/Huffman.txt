#include<iostream>#include<sstream>#include<fstream>#include<map>#include<list>#include<queue>usingnamespacestd;doublecompressed_size;structNode{chardata;doublefreq;Node*left;Node*right;Node(chardata,doublefreq){left=NULL;right=NULL;this->data=data;this->freq=freq;}};structcompare{booloperator()(Node*left,Node*right){return(left->freq>right->freq);}};voidgetCompressedSize(structNode*root,stringstr){if(!root){return;}if(root->data!='$'){compressed_size+=(root->freq*str.length())+8+str.length();}getCompressedSize(root->left,str+"0");getCompressedSize(root->right,str+"1");}stringfileToString(){stringfileLocation;cout<<"Enterthelocationofthefile:";cin>>fileLocation;ifstreaminput(fileLocation);stringstreamstream;stringtext;while(input>>stream.rdbuf()){text=stream.str();}returntext;}pair<list<char>,list<double>>frequencyCalc(stringtext){map<char,double>freqMap;for(inti=0;i<text.length();i++){if(freqMap.find(text[i])==freqMap.end()){freqMap.insert(make_pair(text[i],1));}else{freqMap[text[i]]++;}}list<char>element;list<double>frequency;for(map<char,double>::iteratorit=freqMap.begin();it!=freqMap.end();++it){element.push_back(it->first);frequency.push_back(it->second);}pair<list<char>,list<double>>final;final.first=element;final.second=frequency;returnfinal;}voidHuffmanCodes(list<char>data,list<double>frequency){Node*left;Node*right;Node*top;priority_queue<Node*,vector<Node*>,compare>minHeap;inttemp=data.size();for(inti=0;i<temp;i++){minHeap.push(newNode(data.front(),frequency.front()));data.pop_front();frequency.pop_front();}while(minHeap.size()!=1){left=minHeap.top();minHeap.pop();right=minHeap.top();minHeap.pop();top=newNode('$',left->freq+right->freq);top->left=left;top->right=right;minHeap.push(top);}getCompressedSize(minHeap.top(),"");}intmain(){stringtext=fileToString();doubleuncompressed_size=text.length()*8;pair<list<char>,list<double>>final=frequencyCalc(text);list<char>characters=final.first;list<double>frequency=final.second;HuffmanCodes(characters,frequency);doublecompressed_ratio=uncompressed_size/compressed_size;cout<<compressed_ratio;return1;}